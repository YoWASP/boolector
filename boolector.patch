diff --git a/CMakeLists.txt b/CMakeLists.txt
index 532c08e3..bd003e6a 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -394,6 +394,8 @@ if(MiniSat_FOUND)
     message(FATAL_ERROR "MiniSAT headers not found")
   else()
     add_definitions("-DBTOR_USE_MINISAT")
+    # Disable gzip dependency for new enough MiniSAT.
+    add_definitions("-DMINISAT_LIBRARY_ONLY")
   endif()
 endif()
 
diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index b51e10a1..09b696d2 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -133,6 +133,9 @@ endif()
 if(MiniSat_FOUND)
   target_include_directories(boolector PRIVATE ${MiniSat_INCLUDE_DIR})
   target_link_libraries(boolector ${MiniSat_LIBRARIES})
+  if(WASI)
+    target_link_libraries(boolector wasi-emulated-process-clocks wasi-emulated-signal)
+  endif()
 endif()
 
 install(TARGETS boolector
diff --git a/src/sat/btorminisat.cc b/src/sat/btorminisat.cc
index e37ee585..bc08d612 100644
--- a/src/sat/btorminisat.cc
+++ b/src/sat/btorminisat.cc
@@ -16,6 +16,10 @@
 #define __STDC_FORMAT_MACROS
 #endif
 
+#if defined(__wasm)
+#include <typeinfo>
+#endif
+
 #include "minisat/simp/SimpSolver.h"
 
 #include <cassert>
@@ -257,3 +261,16 @@ btor_sat_enable_minisat (BtorSATMgr* smgr)
 }
 };
 #endif
+
+#if defined(__wasm)
+extern "C" {
+	// FIXME: WASI does not currently support exceptions.
+	void* __cxa_allocate_exception(size_t thrown_size) throw() {
+		return malloc(thrown_size);
+	}
+	bool __cxa_uncaught_exception() throw();
+	void __cxa_throw(void* thrown_exception, struct std::type_info * tinfo, void (*dest)(void*)) {
+		std::terminate();
+	}
+}
+#endif
